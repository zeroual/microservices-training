# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn integration-test

      # package app
      - run: mvn package -DskipTests
      - persist_to_workspace:
          root: .
          paths:
            - config-server
            - discovery-server
            - service1
            - service2
  deploy:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "microservices-training-demo"
      - GOOGLE_PROJECT_ID: "microservices-training-demo"
      - GOOGLE_COMPUTE_ZONE: "us-central1-a"
      - GOOGLE_CLUSTER_NAME: "microservicestrainingdemo"
      - GOOGLE_REGISTRY_URL: "eu.gcr.io"
    working_directory: ~/repo

    steps:
      -  setup_remote_docker
      -  attach_workspace:
           at: .

      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

      - run:
          name: docker config-server
          command: |
            docker image build -t ${GOOGLE_REGISTRY_URL}/${GOOGLE_PROJECT_ID}/config-server:${CIRCLE_WORKFLOW_ID} config-server/
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${GOOGLE_REGISTRY_URL}
            docker push ${GOOGLE_REGISTRY_URL}/${GOOGLE_PROJECT_ID}/config-server:${CIRCLE_WORKFLOW_ID}

      - run:
          name: docker discovery-server
          command: |
            docker image build -t ${GOOGLE_REGISTRY_URL}/${GOOGLE_PROJECT_ID}/discovery-server:${CIRCLE_WORKFLOW_ID} discovery-server/
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${GOOGLE_REGISTRY_URL}
            docker push ${GOOGLE_REGISTRY_URL}/${GOOGLE_PROJECT_ID}/discovery-server:${CIRCLE_WORKFLOW_ID}

      - run:
          name: docker service1
          command: |
            docker image build -t ${GOOGLE_REGISTRY_URL}/${GOOGLE_PROJECT_ID}/service1:${CIRCLE_WORKFLOW_ID} service1/
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${GOOGLE_REGISTRY_URL}
            docker push ${GOOGLE_REGISTRY_URL}/${GOOGLE_PROJECT_ID}/service1:${CIRCLE_WORKFLOW_ID}

      - run:
          name: docker service2
          command: |
            docker image build -t ${GOOGLE_REGISTRY_URL}/${GOOGLE_PROJECT_ID}/service2:${CIRCLE_WORKFLOW_ID} service2/
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${GOOGLE_REGISTRY_URL}
            docker push ${GOOGLE_REGISTRY_URL}/${GOOGLE_PROJECT_ID}/service2:${CIRCLE_WORKFLOW_ID}

      - run:
          name: Deploy to Kubernetes
          command: |
            envsubst < k8s.yml > patched_k8s.yml
            kubectl apply -f patched_k8s.yml
            kubectl rollout status deployment/${PROJECT_NAME}

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build